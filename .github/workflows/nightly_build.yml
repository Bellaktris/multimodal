name: Build/Push Nightly Binary

on:
  # manual trigger
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}

jobs:
  build_wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniconda-version: "latest"
          activate-environment: build_binary
          python-version: ${{ matrix.python-version }}
        run: |
          conda info
      - name: Check python version with conda
        run: |
          python --version
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Update wheel
        run: |
          python -m pip install --upgrade wheel
      - name: Install dependencies
        run: |
          set -eux
          python -m pip install --pre torch torchvision torchtext --extra-index-url https://download.pytorch.org/whl/nightly/cpu
          python -m pip install -r requirements.txt
      - name: Test installation of dependencies
        run: |
          python -c "import torch"
          echo "Import torch succeeded"
          python -c "import torchtext"
          echo "Import torchtext succeeded"
          python -c "import torchvision"
          echo "Import torchvision succeeded"
      - name: Build torchmultimodal nightly
        run: |
          set -eux
          python setup.py bdist_wheel --package_name torchmultimodal-nightly --python-tag=${{ matrix.python-version }}
      - name: Install wheel
        run: |
          set -eux
          python -m pip install dist/torchmultimodal*.whl
      - name: Test torchmultimodal installation
        run: |
          python -c "import torchmultimodal"
      - name: Run unit tests with coverage
        run: |
          set -eux
          python -m pip install pytest pytest-mock pytest-cov
          python -m pytest --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html--cov=. test -vv
